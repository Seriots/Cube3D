diff --git a/z_bonus/include/c3d_headers/mzg_incs.h b/z_bonus/include/c3d_headers/mzg_incs.h
index d8c57c9..f4ade60 100644
--- a/z_bonus/include/c3d_headers/mzg_incs.h
+++ b/z_bonus/include/c3d_headers/mzg_incs.h
@@ -24,7 +24,7 @@
 # define DEFAULT_IMAGE_PATH_SO "imgs/xpm/redWall64x64.xpm"
 # define DEFAULT_IMAGE_PATH_WE "imgs/xpm/purpleWall64x64.xpm"
 # define DEFAULT_IMAGE_PATH_EA "imgs/xpm/greenWall64x64.xpm"
-# define DEFAULT_IMAGE_PATH_CE "imgs/xpm/woodwall.xpm"
+# define DEFAULT_IMAGE_PATH_CE "imgs/xpm/woodrealistic.xpm"
 # define DEFAULT_IMAGE_PATH_FL "imgs/xpm/woodwall.xpm"
 # define DEFAULT_CEIL	"37,37,37"
 # define DEFAULT_FLOOR	"110,110,110"
diff --git a/z_bonus/srcs/game/loop/display/raycasting/c3d_display_sprites.c b/z_bonus/srcs/game/loop/display/raycasting/c3d_display_sprites.c
index df5af28..e2fbd48 100644
--- a/z_bonus/srcs/game/loop/display/raycasting/c3d_display_sprites.c
+++ b/z_bonus/srcs/game/loop/display/raycasting/c3d_display_sprites.c
@@ -6,7 +6,7 @@
 /*   By: pierre-yves <pierre-yves@student.42.fr>    +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2022/10/18 00:48:35 by pierre-yves       #+#    #+#             */
-/*   Updated: 2022/10/18 19:51:56 by pierre-yves      ###   ########.fr       */
+/*   Updated: 2022/10/18 01:26:30 by pierre-yves      ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -31,57 +31,14 @@ double	get_obj_angle(t_game *game, double x, double y)
 	return (angle);
 }
 
-int draw_sprite_vline(t_game *game, t_img_data *img, double dist, int i)
-{
-	int	j;
-
-	j = game->display.max + 1;
-	while (--j > game->display.min && j >= 0)
-	{
-		if (j > WIN_HEIGHT)
-			continue ;
-		my_mlx_pixel_put(&game->all_img.screen_img,
-			i, j, 0xFFFFFF);
-	}
-	return (0);
-	(void)img;
-	(void)dist;
-}
-
-int	display_stuff(t_game *game, t_img_data *img, double dist, double angle)
-{
-	int	vline;
-	double	sprite_width;
-	int	i;
-
-	vline = -game->settings.fov * tan(angle) * (double)WIN_WIDTH / (double)VIEW_WIDTH + (double)WIN_WIDTH / 2;
-	sprite_width = (((double)WIN_WIDTH / (double)VIEW_WIDTH ) * CASE_SIZE / 2) * game->settings.fov / dist;
-	i = -sprite_width / 2;
-	game->display.d = (vline - (double)WIN_WIDTH / 2.0)
-		* (double)VIEW_WIDTH / (double)WIN_WIDTH;
-	game->display.angle = 1 / sqrt(1 + pow(game->display.d / game->settings.fov, 2));
-	game->display.min = (double)VIEW_HEIGHT / 2 - game->player.updown + game->player.z - ((double)CASE_SIZE / 2 - game->player.updown) * game->settings.fov / (game->display.angle * (dist + game->settings.fov / (game->display.angle)));
-	game->display.max = -(double)VIEW_HEIGHT / 2 + game->player.updown - game->player.z - ((double)CASE_SIZE / 2 + game->player.updown) * game->settings.fov / (game->display.angle * (dist + game->settings.fov / (game->display.angle)));
-	game->display.min *= (double)WIN_HEIGHT / (double)VIEW_HEIGHT;
-	game->display.min *= -(double)WIN_HEIGHT / (double)VIEW_HEIGHT;
-	while (i < sprite_width / 2)
-	{
-		draw_sprite_vline(game, img, dist, i + vline);
-		i++;
-	}
-	return (0);
-}
-
 int	display_sprite(t_game *game, double x, double y, t_img_data *img)
 {
 	double	obj_angle;
-	double	dist;
 
 	obj_angle = get_obj_angle(game, x - game->display.xfov, y - game->display.yfov);
 	if (obj_angle > game->display.left_angle || obj_angle < game->display.right_angle)
 		return (0);
-	dist = sqrt(pow(x - game->display.xfov, 2) + pow(y - game->display.yfov, 2)) - game->settings.fov / cos(dabs(obj_angle - game->player.plane.value));
-	display_stuff(game, img, dist, obj_angle - game->player.plane.value);
+	
 }
 
 int	display_all_sprites(t_game *game)
diff --git a/z_bonus/srcs/game/loop/display/raycasting/c3d_raycasting.c b/z_bonus/srcs/game/loop/display/raycasting/c3d_raycasting.c
index e94d102..1826758 100644
--- a/z_bonus/srcs/game/loop/display/raycasting/c3d_raycasting.c
+++ b/z_bonus/srcs/game/loop/display/raycasting/c3d_raycasting.c
@@ -6,7 +6,7 @@
 /*   By: pierre-yves <pierre-yves@student.42.fr>    +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2022/09/27 14:42:38 by lgiband           #+#    #+#             */
-/*   Updated: 2022/10/18 19:50:58 by pierre-yves      ###   ########.fr       */
+/*   Updated: 2022/10/18 01:02:35 by pierre-yves      ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
diff --git a/z_bonus/srcs/game/loop/display/raycasting/c3d_raycasting_display.c b/z_bonus/srcs/game/loop/display/raycasting/c3d_raycasting_display.c
index 9a43dd5..85fa0b2 100644
--- a/z_bonus/srcs/game/loop/display/raycasting/c3d_raycasting_display.c
+++ b/z_bonus/srcs/game/loop/display/raycasting/c3d_raycasting_display.c
@@ -6,7 +6,7 @@
 /*   By: pierre-yves <pierre-yves@student.42.fr>    +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2022/09/29 10:41:24 by lgiband           #+#    #+#             */
-/*   Updated: 2022/10/18 19:27:13 by pierre-yves      ###   ########.fr       */
+/*   Updated: 2022/10/17 22:32:16 by pierre-yves      ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -148,7 +148,7 @@ int	display_wall(t_game *game, t_wall *wall, int i)
 	game->display.min = (double)VIEW_HEIGHT / 2 - game->player.updown + game->player.z - ((double)CASE_SIZE / 2 - game->player.updown) * game->settings.fov / (game->display.angle * (wall->dist + game->settings.fov / (game->display.angle)));
 	game->display.max = -(double)VIEW_HEIGHT / 2 + game->player.updown - game->player.z - ((double)CASE_SIZE / 2 + game->player.updown) * game->settings.fov / (game->display.angle * (wall->dist + game->settings.fov / (game->display.angle)));
 	game->display.min *= (double)WIN_HEIGHT / (double)VIEW_HEIGHT;
-	game->display.min *= -(double)WIN_HEIGHT / (double)VIEW_HEIGHT;
+	game->display.max *= -(double)WIN_HEIGHT / (double)VIEW_HEIGHT;
 	game->display.x = (int)(wall->dist_from_start * game->display.img->width / CASE_SIZE)
 		% game->display.img->width;
 	game->display.factor = game->display.img->height / (game->display.max - game->display.min);
